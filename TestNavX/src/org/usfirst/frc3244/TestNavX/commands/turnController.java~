// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.TestNavX.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import org.usfirst.frc3244.TestNavX.Robot;
import org.usfirst.frc3244.TestNavX.RobotMap;

/**
 *
 */
public class turnController extends PIDCommand {

    private boolean rotateToAngle;
	private double rotateToAngleRate;
	static final double kToleranceDegrees = 2.0f;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public turnController() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("turnController", 0.05, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        
        return RobotMap.ahrs.getAngle();

       
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	rotateToAngleRate = output;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	rotateToAngle = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	double currentRotationRate; 
    	
    	if ( Robot.oi.joystick.getRawButton(1)) {
    		getPIDController().setSetpoint(0.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.joystick.getRawButton(2)) {
        	getPIDController().setSetpoint(-90.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.joystick.getRawButton(4)) {
        	getPIDController().setSetpoint(179.9f);
            rotateToAngle = true;
        } else if ( Robot.oi.joystick.getRawButton(3)) {
        	getPIDController().setSetpoint(90.0f);
            rotateToAngle = true;
        }else{
        	rotateToAngle = false;
        }
        
        if ( rotateToAngle ) {
        	getPIDController().enable();
            currentRotationRate = rotateToAngleRate;
        } else {
        	getPIDController().disable();
            currentRotationRate = Robot.oi.joystick.getRawAxis(4);
        }
    	Robot.driveTrain.myArcadeDrive(Robot.oi.joystick.getRawAxis(1), -currentRotationRate);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
