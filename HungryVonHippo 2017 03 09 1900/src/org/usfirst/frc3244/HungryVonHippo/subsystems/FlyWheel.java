// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.subsystems;

import org.usfirst.frc3244.HungryVonHippo.Robot;
import org.usfirst.frc3244.HungryVonHippo.RobotMap;
import org.usfirst.frc3244.HungryVonHippo.commands.*;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class FlyWheel extends Subsystem {
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Indexer = RobotMap.flyWheelmotor_Indexer;
    private final CANTalon motor_FlyWhell = RobotMap.flyWheelmotor_FlyWhell;
    private final Servo servo_Elevator = RobotMap.flyWheelservo_Elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    

	  
	 // member variables for PID Motor
	 	private static final int kMaxNumberOfMotors = 1;
	 	private final int m_invertedMotors[] = new int[kMaxNumberOfMotors];
	 	private static final int kFlyWheel = 0;


	 	// create objects needed for independent control of each wheel
	 	private CANTalon[] m_talons = new CANTalon[kMaxNumberOfMotors];
	 	private double m_wheelSpeeds[] = new double[kMaxNumberOfMotors];
	 	private double m_zeroPositions[] = new double[kMaxNumberOfMotors];

	 	private boolean m_useVoltageRamp = true;
	 	private double m_voltageRampRate = 25.0;//48.0; // in volts/second
	 	private boolean m_breakMode = false;


	 	// member variables to support closed loop mode
	 	private boolean m_closedLoopMode = true;
	 	private double m_maxWheelSpeed = 900;     // empirically measured around 900
		private double m_wheelSpeed;
	  

	    // Put methods for controlling this subsystem
	    // here. Call these from Commands.
	 	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double highGoal_Servo_Auto = .5;
    public static final double highGoal_FlyWheel_Auto = 80;
    public static final double indexer_FeedRate_HighSpeed = 100;
    public static final double indexer_FeedRate_Med_Speed = 75;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void My_FlyWheel_Run(double percent){
    	m_wheelSpeed = percent;
    	m_wheelSpeed = m_wheelSpeed * m_maxWheelSpeed;
    	motor_FlyWhell.set(m_wheelSpeed);//m_wheelSpeed);
    	System.out.println(m_wheelSpeed);
    }
    
    public void My_FlyWheel_Stop(){
    	motor_FlyWhell.set(0);
    }
    
    public void updateSmartDashboard() {

		if (Robot.DEBUG) {	
			SmartDashboard.putNumber("Fly Wheel RPM", motor_FlyWhell.getSpeed());
		}
    }
		
}

