// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Watson.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.Watson.Robot;
import org.usfirst.frc3244.Watson.RobotMap;

/**
 *
 */
public class turnController extends PIDCommand {

    private boolean rotateToAngle;
	private double rotateToAngleRate;
	static final double kToleranceDegrees = 2.0f;
	
	private double max = 1;
	private double min = -1;
	private double deadband = .2;
	
	
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public turnController() {

   
        super("turnController", 0.02, 0.0, 0.0, 0.02);
        getPIDController().setInputRange(-180.0f,  180.0f);
        getPIDController().setOutputRange(-1.0, 1.0);
        getPIDController().setAbsoluteTolerance(kToleranceDegrees);
        getPIDController().setContinuous(true);
 
        requires(Robot.driveTrain);

  
    }

    protected double returnPIDInput() {
             
        return RobotMap.ahrs.getAngle();
      
    }

    protected void usePIDOutput(double output) {
      
    	rotateToAngleRate = output;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	rotateToAngle = false;
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	SmartDashboard.putBoolean(  "IMU_Connected",        RobotMap.ahrs.isConnected());
        SmartDashboard.putBoolean(  "IMU_IsCalibrating",    RobotMap.ahrs.isCalibrating());
        SmartDashboard.putNumber(   "IMU_Yaw",              RobotMap.ahrs.getYaw());
        SmartDashboard.putNumber(   "IMU_FusedHeading",     RobotMap.ahrs.getFusedHeading());
       
    	double currentRotationRate; 
    	double x = Robot.oi.xbox_1.getRawAxis(0);
    	double y = Robot.oi.xbox_1.getRawAxis(1);
    	//double r;
    	double gyro;
    	
    	
    	if ( Robot.oi.xbox_1.getRawButton(6)) {
    		RobotMap.ahrs.reset();
        }
    	if ( Robot.oi.xbox_1.getPOV()				==	0) {
    		getPIDController().setSetpoint(0.0f);
            rotateToAngle = true;
    	}  else if ( Robot.oi.xbox_1.getPOV()		==	45) {
           	getPIDController().setSetpoint(45.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xbox_1.getPOV()		==	90) {
        	getPIDController().setSetpoint(90.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xbox_1.getPOV()		==	135) {
        	getPIDController().setSetpoint(135.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xbox_1.getPOV()		==	180) {
        	getPIDController().setSetpoint(179.9f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xbox_1.getPOV()		==	225) {
            getPIDController().setSetpoint(-135.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xbox_1.getPOV()		==	270) {
            getPIDController().setSetpoint(-90.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.xbox_1.getPOV()		==	315) {
        	getPIDController().setSetpoint(-45.0f);
            rotateToAngle = true;
        }else{
        	rotateToAngle = false;
        }
        
        if ( rotateToAngle ) {
        	getPIDController().enable();
            currentRotationRate = rotateToAngleRate;
        } else {
        	getPIDController().disable();
            currentRotationRate = Robot.oi.xbox_1.getRawAxis(4);
            
            x = Robot.oi.xbox_1.getRawAxis(0);
        	y = Robot.oi.xbox_1.getRawAxis(1);
        	currentRotationRate = Robot.oi.xbox_1.getRawAxis(4)*.5; //Soften Rotation by half
        	gyro = 0 ;
        	
        	x = Robot.driveTrain.target(x,deadband,min,max);
        	y = Robot.driveTrain.target(y,deadband,min,max);
        	currentRotationRate = Robot.driveTrain.target(currentRotationRate,deadband,min,max);

        }
        
        Robot.driveTrain.my_Basic_Drive_Mecanum(-x, -y, currentRotationRate, 0);
    	//Robot.driveTrain.myArcadeDrive(Robot.oi.xbox_1.getRawAxis(1), -currentRotationRate);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
