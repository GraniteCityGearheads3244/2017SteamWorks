// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Watson.subsystems;

import org.usfirst.frc3244.Watson.Robot;
import org.usfirst.frc3244.Watson.RobotMap;
import org.usfirst.frc3244.Watson.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Fuel_Delivery extends Subsystem {
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Fuel_Indexer = RobotMap.fuel_DeliveryMotor_Fuel_Indexer;
    private final CANTalon motor_Fuel_Flywheel = RobotMap.fuel_DeliveryMotor_Fuel_Flywheel;
    private final Servo elevator = RobotMap.fuel_DeliveryElevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void My_Flywheel_OpenLoop(double speed){
    	motor_Fuel_Flywheel.set(speed);
    	
    }
    public void My_Flywheel_CloseLoop(double rpm){
    	motor_Fuel_Flywheel.set(rpm);
    }
    public void My_Indexer(double speed){
    	motor_Fuel_Indexer.set(speed);
    }
   
    
    public void diagnostics(){
		if (Robot.DEBUG){
			SmartDashboard.putNumber("Fly Wheel Speed", motor_Fuel_Flywheel.getSpeed());
		}
	}
	public void changeControlMode(TalonControlMode controlMode) {
		motor_Fuel_Flywheel.changeControlMode(controlMode);
		
	}
	 public void My_Elevator(double arg){
	    	elevator.set(arg);
	    }
	    public void My_Elevator(){
	    	//elevator.set(SmartDashboard.getNumber(key, defaultValue));
	    }
}

