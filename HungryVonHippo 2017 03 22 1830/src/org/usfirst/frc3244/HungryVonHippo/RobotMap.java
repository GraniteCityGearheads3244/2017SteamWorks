// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

//Manually Configured Imports
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static CANTalon drivemotor_Front_Left;
    public static CANTalon drivemotor_Front_Right;
    public static CANTalon drivemotor_Back_Left;
    public static CANTalon drivemotor_Back_Right;
    public static BuiltInAccelerometer roboRioAccelerometer ; 
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController winchmotor_Winch;
    public static DigitalInput winchlimitSwitch_Left;
    public static DigitalInput winchlimitSwitch_Right;
    public static SpeedController fuelIntakemotor_IntakeRoller;
    public static AnalogPotentiometer wristPot;
    public static SpeedController wristmotor;
    public static SpeedController flyWheelmotor_Indexer;
    public static CANTalon flyWheelmotor_FlyWheel;
    public static Relay vision_hardwarelights_Left_and_Forward;
    public static Relay vision_hardwarelights_Right;
    public static Servo elevatorServoservo_Elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS ahrs;
    public static final int DRIVE_FRONT_LEFT_PDP = 0;
	public static final int DRIVE_FRONT_RIGHT_PDP = 0;
	public static final int DRIVE_BACK_LEFT_PDP = 0;
	public static final int DRIVE_BACK_RIGHT_PDP = 0;
	
	
	static void init() { 
		
		roboRioAccelerometer = new BuiltInAccelerometer();
		
		//Not Letting RobotBuilder Manage These Anymore
		drivemotor_Front_Left = new CANTalon(2);//1);
        LiveWindow.addActuator("Drive", "motor_Front_Left", drivemotor_Front_Left);
        
        drivemotor_Front_Right = new CANTalon(4);//2);
        LiveWindow.addActuator("Drive", "motor_Front_Right", drivemotor_Front_Right);
        
        drivemotor_Back_Left = new CANTalon(1);//3);
        LiveWindow.addActuator("Drive", "motor_Back_Left", drivemotor_Back_Left);
        
        drivemotor_Back_Right = new CANTalon(3);//4);
        LiveWindow.addActuator("Drive", "motor_Back_Right", drivemotor_Back_Right);
        
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        winchmotor_Winch = new VictorSP(1);
        LiveWindow.addActuator("Winch", "motor_Winch", (VictorSP) winchmotor_Winch);
        
        winchlimitSwitch_Left = new DigitalInput(0);
        LiveWindow.addSensor("Winch", "limitSwitch_Left", winchlimitSwitch_Left);
        
        winchlimitSwitch_Right = new DigitalInput(1);
        LiveWindow.addSensor("Winch", "limitSwitch_Right", winchlimitSwitch_Right);
        
        fuelIntakemotor_IntakeRoller = new VictorSP(2);
        LiveWindow.addActuator("Fuel Intake", "motor_IntakeRoller", (VictorSP) fuelIntakemotor_IntakeRoller);
        
        wristPot = new AnalogPotentiometer(2, 270.0, -82.3);
        LiveWindow.addSensor("Wrist", "Pot", wristPot);
        
        wristmotor = new Spark(3);
        LiveWindow.addActuator("Wrist", "motor", (Spark) wristmotor);
        
        flyWheelmotor_Indexer = new VictorSP(5);
        LiveWindow.addActuator("FlyWheel", "motor_Indexer", (VictorSP) flyWheelmotor_Indexer);
        
        flyWheelmotor_FlyWheel = new CANTalon(5);
        LiveWindow.addActuator("FlyWheel", "motor_FlyWheel", flyWheelmotor_FlyWheel);
        
        vision_hardwarelights_Left_and_Forward = new Relay(0);
        LiveWindow.addActuator("Vision_hardware", "lights_Left_and_Forward", vision_hardwarelights_Left_and_Forward);
        
        vision_hardwarelights_Right = new Relay(1);
        LiveWindow.addActuator("Vision_hardware", "lights_Right", vision_hardwarelights_Right);
        
        elevatorServoservo_Elevator = new Servo(4);
        LiveWindow.addActuator("ElevatorServo", "servo_Elevator", elevatorServoservo_Elevator);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // Invert Motors
        fuelIntakemotor_IntakeRoller.setInverted(true);
        winchmotor_Winch.setInverted(true);
        flyWheelmotor_Indexer.setInverted(true);
        
        // Invert Encoders
      
        /* first choose the sensor */
        flyWheelmotor_FlyWheel.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        flyWheelmotor_FlyWheel.reverseSensor(true);
        flyWheelmotor_FlyWheel.configEncoderCodesPerRev(80); // if using FeedbackDevice.QuadEncoder
        //_talon.configPotentiometerTurns(XXX), // if using FeedbackDevice.AnalogEncoder or AnalogPot

        /* set the peak and nominal outputs, 12V means full */
        flyWheelmotor_FlyWheel.configNominalOutputVoltage(+0.0f, -0.0f);
        flyWheelmotor_FlyWheel.configPeakOutputVoltage(+12.0f, -0.0f);
        /* set closed loop gains in slot0 */
        flyWheelmotor_FlyWheel.setProfile(0);
        flyWheelmotor_FlyWheel.setF(2.13);
        flyWheelmotor_FlyWheel.setP(0);
        flyWheelmotor_FlyWheel.setI(0); 
        flyWheelmotor_FlyWheel.setD(0);
        flyWheelmotor_FlyWheel.changeControlMode(TalonControlMode.Speed);
        flyWheelmotor_FlyWheel.setVoltageRampRate(24.0);
        //Create Gyro
        try {
        	System.out.println("Hello Tying to INIT Navx");
            /* Communicate w/navX MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
        
            //ahrs = new AHRS(SPI.Port.kMXP); 
        	//ahrs = new AHRS(I2C.Port.kMXP);
        	ahrs = new AHRS(SerialPort.Port.kUSB);
            //ahrs = new AHRS(I2C.Port.kOnboard); 
        	//ahrs = new AHRS(I2C.Port.kOnboard,(byte)200);
            
        } catch (RuntimeException ex ) {
        	System.out.println("Hello from the runtimeExcept");
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
    }
}
