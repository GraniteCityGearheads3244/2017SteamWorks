// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Watson.commands.Drive;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.Watson.RobotMap;
import org.usfirst.frc3244.Watson.Robot;

/**
 *
 */
public class Drive_Rotate_To_Heading extends PIDCommand {
	
	private boolean rotateToAngle;
	private double rotateToAngleRate;
	private boolean diagEn = RobotMap.diagEn;
	static final double kToleranceDegrees = 2.0f;
	

    
    public Drive_Rotate_To_Heading() {
    	super("turnController", 0.05, 0.0, 0.0, 0.02);
        getPIDController().setInputRange(-180.0f,  180.0f);
        getPIDController().setOutputRange(-1.0, 1.0);
        getPIDController().setAbsoluteTolerance(kToleranceDegrees);
        getPIDController().setContinuous(true);
        
        
        requires(Robot.driveTrain);

    }
    
    protected double returnPIDInput() {
        
    	return RobotMap.gyro_ahrs.getAngle();
      
    }

    protected void usePIDOutput(double output) {
      
    	rotateToAngleRate = output;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	rotateToAngle = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(diagEn ){
    		Diagnostics();
    	}
    	double currentRotationRate; 
    	if ( Robot.oi.xbox_1.getRawButton(6)) {
    		RobotMap.gyro_ahrs.reset();
        }
    	if ( Robot.oi.xbox_1.getRawButton(1)) {
    		getPIDController().setSetpoint(0.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.xbox_1.getRawButton(2)) {
        	getPIDController().setSetpoint(-90.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.xbox_1.getRawButton(4)) {
        	getPIDController().setSetpoint(179.9f);
            rotateToAngle = true;
        } else if ( Robot.oi.xbox_1.getRawButton(3)) {
        	getPIDController().setSetpoint(90.0f);
            rotateToAngle = true;
        }else{
        	rotateToAngle = false;
        }
        
        if ( rotateToAngle ) {
        	getPIDController().enable();
            currentRotationRate = rotateToAngleRate;
        } else {
        	getPIDController().disable();
            currentRotationRate = Robot.oi.xbox_1.getRawAxis(4);
        }
        Robot.driveTrain.my_Basic_Drive_Mecanum(0, 0, currentRotationRate, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    private void Diagnostics(){
    	SmartDashboard.putBoolean(  "IMU_Connected",        RobotMap.gyro_ahrs.isConnected());
        SmartDashboard.putBoolean(  "IMU_IsCalibrating",    RobotMap.gyro_ahrs.isCalibrating());
        SmartDashboard.putNumber(   "IMU_Yaw",              RobotMap.gyro_ahrs.getYaw());
        SmartDashboard.putNumber(   "IMU_FusedHeading",     RobotMap.gyro_ahrs.getFusedHeading());
    	
    }

}
