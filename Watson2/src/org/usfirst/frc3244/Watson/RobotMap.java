// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Watson;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

// IMPORTS FOR THE NAVX BOARD
import edu.wpi.first.wpilibj.DriverStation;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.I2C;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainMotor_Left_Front;
    public static CANTalon driveTrainMotor_Left_Rear;
    public static CANTalon driveTrainMotor_Right_Front;
    public static CANTalon driveTrainMotor_Right_Rear;
    public static RobotDrive driveTrainRobotDrive41;
    public static AnalogInput driveTrainUltrasonic;
    public static VictorSP fuel_DeliveryMotor_Fuel_Indexer;
    public static CANTalon fuel_DeliveryMotor_Fuel_Flywheel;
    public static SpeedController winchMotor_Winch;
    public static SpeedController fuel_IntakeMotor_Intake_Roler;
    public static SpeedController gear_LiftMotor_Gear_Lift;
    public static AnalogPotentiometer gear_LiftPot_Gear_Lift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS gyro_ahrs;
  
    //Control Variables
    public static final boolean diagEn = true;
    public static boolean isCompetitionBot = true;
    
    public enum RobotDriveTrainSettings {
		MINIMAL_DRIVE_SPEED(-1, -.05),
		MAX_DRIVE_SPEED(1, .6),
		DEADBAND(0.2,0.2),
		VELOCITY_TURBO(1.0,0.5),
		VELOCITY_NORMAL(0.75,0.3),
		VELOCITY_SNAIL(0.3,0.2);
	
		private final double m_competitionSetting;
		private final double m_practiceSetting;
		
		public double get() {
			return isCompetitionBot ? m_competitionSetting : m_practiceSetting; 
		}
		
		RobotDriveTrainSettings(double competitionSetting, double practiceSetting) {
	    	m_competitionSetting = competitionSetting;
	    	m_practiceSetting = practiceSetting;
		}
	}
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainMotor_Left_Front = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Front", driveTrainMotor_Left_Front);
        
        driveTrainMotor_Left_Rear = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "Motor_Left_Rear", driveTrainMotor_Left_Rear);
        
        driveTrainMotor_Right_Front = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Front", driveTrainMotor_Right_Front);
        
        driveTrainMotor_Right_Rear = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain", "Motor_Right_Rear", driveTrainMotor_Right_Rear);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainMotor_Left_Front, driveTrainMotor_Left_Rear,
              driveTrainMotor_Right_Front, driveTrainMotor_Right_Rear);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainUltrasonic = new AnalogInput(1);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);
        
        fuel_DeliveryMotor_Fuel_Indexer = new VictorSP(1);
        //LiveWindow.addActuator("Fuel_Delivery", "Motor_Fuel_Indexer", (Spark) fuel_DeliveryMotor_Fuel_Indexer);
        
        fuel_DeliveryMotor_Fuel_Flywheel = new CANTalon(5);
        LiveWindow.addActuator("Fuel_Delivery", "Motor_Fuel_Flywheel", fuel_DeliveryMotor_Fuel_Flywheel);
        
        winchMotor_Winch = new Spark(1);
        LiveWindow.addActuator("Winch", "Motor_Winch", (Spark) winchMotor_Winch);
        
        fuel_IntakeMotor_Intake_Roler = new Spark(2);
        LiveWindow.addActuator("Fuel_Intake", "Motor_Intake_Roler", (Spark) fuel_IntakeMotor_Intake_Roler);
        
        gear_LiftMotor_Gear_Lift = new Spark(3);
        LiveWindow.addActuator("Gear_Lift", "Motor_Gear_Lift", (Spark) gear_LiftMotor_Gear_Lift);
        
        gear_LiftPot_Gear_Lift = new AnalogPotentiometer(2, 270.0, 0.0);
        LiveWindow.addSensor("Gear_Lift", "Pot_Gear_Lift", gear_LiftPot_Gear_Lift);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        My_Setup_NavX();
        //setup TalonSRX_Encoders();
       
    }
    private static void setup_TalonSRX_Encoders(){
    	 My_Setup_DriveTrain_Encoders(driveTrainMotor_Left_Front, 0, false, 0, 0.2, 0.0, 0.0, 0.0);
         My_Setup_DriveTrain_Encoders(driveTrainMotor_Left_Rear, 0, false, 0, 0.2, 0.0, 0.0, 0.0);
         My_Setup_DriveTrain_Encoders(driveTrainMotor_Right_Front, 0, false, 0, 0.2, 0.0, 0.0, 0.0);
         My_Setup_DriveTrain_Encoders(driveTrainMotor_Right_Rear, 0, false, 0, 0.2, 0.0, 0.0, 0.0);
    }
    
    private static void My_Setup_DriveTrain_Encoders(CANTalon _talon, int cpr, boolean reverse,
    		int profile, double p,double i,double d, double f){
    	_talon.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
    	_talon.reverseSensor(reverse);
        _talon.configEncoderCodesPerRev(cpr);
        //_talon.configEncoderCodesPerRev(XXX), // if using FeedbackDevice.QuadEncoder
        //_talon.configPotentiometerTurns(XXX), // if using FeedbackDevice.AnalogEncoder or AnalogPot

        /* set the peak and nominal outputs, 12V means full */
        _talon.configNominalOutputVoltage(+0.0f, -0.0f);
        _talon.configPeakOutputVoltage(+12.0f, -12.0f);
        
        /* set closed loop gains in slot0/1 */
        _talon.setProfile(profile);
        _talon.setF(f);
        _talon.setP(p);
        _talon.setI(i); 
        _talon.setD(d);
        

        /*
         * Set Ramp Rate
         */
        _talon.setVoltageRampRate(.1);
        
        //Do this here?
        _talon.changeControlMode(TalonControlMode.Speed);
        _talon.set(0);
        
        
    }
    
    private static void My_Setup_NavX(){
    	//Set Up NavX
        try {
            /* Communicate w/navX MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
        
            //ahrs = new AHRS(SPI.Port.kMXP); 
            gyro_ahrs = new AHRS(I2C.Port.kMXP); 
            //ahrs = new AHRS(I2C.Port.kOnboard,(byte)200);
            
        } catch (RuntimeException ex ) {
        	System.out.println("Hello from the runtimeExcept");
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
        
        
    }
}
