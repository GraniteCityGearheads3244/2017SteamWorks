// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.TalonSRXDrive;



import org.usfirst.frc3244.TalonSRXDrive.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xbox_1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox_1 = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    public double driveX() {
		return(xbox_1.getRawAxis(0));
	}
	
	public double driveY() {
		// The driveY is the "Y" Axis of the Driver Gamepad.
		// However, the joysticks give -1.0 on the Y axis when pushed forward
		// This method reverses that, so that positive numbers are forward
		return (-xbox_1.getRawAxis(1));
	}
	
	public double driveRotation() {
		return xbox_1.getRawAxis(4);
	}

	public boolean driveTurboMode() {
		//return(DRIVER_PAD.getRawButton(OI.GAMEPAD_F310_LEFT_BUTTON));
		return false;
	}
	public boolean crawlBackward() {
        //return(DRIVER_PAD.getRawButton(OI.GAMEPAD_F310_A_BUTTON));
        return false;
    }
    
    public boolean crawlForward() {
        //return(DRIVER_PAD.getRawButton(OI.GAMEPAD_F310_Y_BUTTON));
        return false;
    }
    
    public boolean crawlLeft() {
        //return(DRIVER_PAD.getRawButton(OI.GAMEPAD_F310_X_BUTTON));
        return false;
    }
    
    public boolean crawlRight() {
        //return(DRIVER_PAD.getRawButton(OI.GAMEPAD_F310_B_BUTTON));
        return false;
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxbox_1() {
        return xbox_1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

