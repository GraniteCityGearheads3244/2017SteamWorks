// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo;

import org.usfirst.frc3244.HungryVonHippo.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.InternalButton;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3244.HungryVonHippo.subsystems.*;
import org.usfirst.frc3244.HungryVonHippo.util.JoystickAxisButton;
import org.usfirst.frc3244.HungryVonHippo.util.JoystickPOVButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xBox_Driver;
    public Joystick xBox_CoDriver;
    public Joystick launchPad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
   public JoystickButton a_xBox_Driver;
   public JoystickButton b_xBox_Driver;
   public JoystickButton x_xBox_Driver;
   public JoystickButton y_xBox_Driver;
   public JoystickButton lb_xBox_Driver;
   public JoystickButton rb_xBox_Driver;
   public JoystickButton start_xBox_Driver;
   public JoystickButton reset_xBox_Driver;
   
   public JoystickAxisButton rt_xBox_Driver;
  
   
   public Joystick xbox_xBox_CoDriver;
   public JoystickButton a_xBox_CoDriver;
   public JoystickButton b_xBox_CoDriver;
   public JoystickButton x_xBox_CoDriver;
   public JoystickButton y_xBox_CoDriver;
   public JoystickButton lb_xBox_CoDriver;
   public JoystickButton rb_xBox_CoDriver;
   public JoystickButton start_xBox_CoDriver;
   public JoystickButton reset_xBox_CoDriver;
   
   public JoystickAxisButton rt_xBox_CoDriver;
   
   public JoystickButton btn1_launchPad;
   public JoystickButton btn2_launchPad;
   public JoystickButton toggleSwitch_launchPad;
   
   //InternalButtons
   public InternalButton example;

    public OI() {
    	setUp_Controler_xBox_Driver();
    	setUp_Controler_xBox_CoDriver();
    	setUp_Controler_LaunchPad();
    	setUp_SmartDashboard_Buttons();
    }
    
    private void setUp_Controler_xBox_Driver(){
    	xBox_Driver = new Joystick(0);
    	
        a_xBox_Driver = new JoystickButton(xBox_Driver, 1);
        // Mapped in Subsystem DRIVE a_xBox_Driver.whileHeld(new CMD());
        
        b_xBox_Driver = new JoystickButton(xBox_Driver, 2);
        //Mapped in Subsystem DRIVE b_xBox_Driver.whileHeld(new CMD());
        
        x_xBox_Driver = new JoystickButton(xBox_Driver, 3);
        //Mapped in Subsystem DRIVE x_xBox_Driver.whileHeld(new CMD());
        
        y_xBox_Driver = new JoystickButton(xBox_Driver, 4);
        //Mapped in Subsystem DRIVE y_xBox_Driver.whileHeld(new CMD());
        
        lb_xBox_Driver = new JoystickButton(xBox_Driver, 5);
        //lb_xBox_Driver.whileHeld(new Gear_Lift_Jog_Down());

        rb_xBox_Driver = new JoystickButton(xBox_Driver, 6);
        //rb_xBox_Driver.whileHeld(new Gear_Lift_Jog_Up());

        reset_xBox_Driver = new JoystickButton(xBox_Driver, 7);
        reset_xBox_Driver.whenReleased(new CG_Leave_Gear_On_Peg());
        
        start_xBox_Driver = new JoystickButton(xBox_Driver, 8);
        start_xBox_Driver.whileHeld(new FlyWheel_Run(0.8));
        
        rt_xBox_Driver = new JoystickAxisButton(xBox_Driver, 3);
        rt_xBox_Driver.whileHeld(new Vision_Right_Light(true));
    }
    
    private void setUp_Controler_xBox_CoDriver(){
    	xBox_CoDriver = new Joystick(1);
    	
    	a_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 1);
        a_xBox_CoDriver.whenPressed(new Wrist_to_Setpoint(Robot.wrist.DOWN));
        
        b_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 2);
        b_xBox_CoDriver.whenPressed(new Wrist_to_Setpoint(Robot.wrist.PRESENT_GEAR_ON_PEG));
        
    	x_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 3);
        //x_xBox_CoDriver.whileHeld(new CMD());
       
        y_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 4);
        y_xBox_CoDriver.whenPressed(new Wrist_to_Setpoint(Robot.wrist.UP));
        
        lb_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 5);
        lb_xBox_CoDriver.whileHeld(new Elevator_Jog_Down());
        
        rb_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 6);
        rb_xBox_CoDriver.whileHeld(new Elevator_Jog_Up());
        
        reset_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 7);
        //reset_xBox_CoDriver.whenPressed(new CMD());
        
        start_xBox_CoDriver = new JoystickButton(xBox_CoDriver, 8);
       // start_xBox_CoDriver.whileHeld(new Winch_Jog(-Robot.winch.CLIMB_ENGAGE));
        start_xBox_CoDriver.whileHeld(new Winch_Jog(-Robot.winch.CLIMB_SPEED));
        
        rt_xBox_CoDriver = new JoystickAxisButton(xBox_CoDriver, 3);
        rt_xBox_CoDriver.whileHeld(new IntakeFuel(Robot.fuelIntake.INTAKESPEED));
    }
    
    private void setUp_Controler_LaunchPad(){
    	launchPad = new Joystick(2);
        
    	btn1_launchPad = new JoystickButton(launchPad, 1);
    	btn1_launchPad.whileHeld(new Elevator_Jog_Up());
    	
    	btn2_launchPad = new JoystickButton(launchPad, 2);
    	btn2_launchPad.whileHeld(new Elevator_Jog_Down());
    	
    	toggleSwitch_launchPad = new JoystickButton(launchPad, 7);
        //toggleSwitch.whileHeld(new Drive_Robot_Robot_Field_Oriented_Mecanum());
    	
    }
    
    private void setUp_SmartDashboard_Buttons(){
    	SmartDashboard.putNumber("Claw Shot Setpoint",15);
    	example = new InternalButton();
    	//example.whileHeld(new CMD());
    	
    	SmartDashboard.putData("Wrist Up", new Wrist_to_Setpoint(Robot.wrist.UP));
    	SmartDashboard.putData("Wrist Deliver", new Wrist_to_Setpoint(Robot.wrist.PRESENT_GEAR_ON_PEG));
    	SmartDashboard.putData("Wrist Down", new Wrist_to_Setpoint(Robot.wrist.DOWN));
    	
    	//SmartDashboard.putData("Load Gear to Peg", new CG_Load_Gear_On_Peg());
    }
    private double stickClamp(double value, double min, double max){
    	if(value>max){
    		return max;
    	}else if(value < min){
    		return min;
    	}else{
    		return value;
    	}
    }
    private double stickDeadBand(double value, double deadband){
    	if(Math.abs(value)<deadband){
    		return 0;
    	}else{
    		return value;
    	}
    }
    public double driveX() {
    	return(stickDeadBand(-xBox_Driver.getRawAxis(0),.2));
	}
	
    //Strife
	public double driveY() {
		// The driveY is the "Y" Axis of the Driver Gamepad.
		// However, the joysticks give -1.0 on the Y axis when pushed forward
		// This method reverses that, so that positive numbers are forward
		return (stickDeadBand(-xBox_Driver.getRawAxis(1),.2));
	}
	
	public double driveRotation() {
		return stickDeadBand(xBox_Driver.getRawAxis(4),.2);
	}

	public boolean driveTurboMode() {
		return(xBox_Driver.getRawButton(5));
		
	}
	public boolean crawlBackward() {
        return(xBox_Driver.getRawButton(1));
       
    }
	public boolean crawlForward() {
    	return(xBox_Driver.getRawButton(4));
    }
    
    public boolean crawlLeft() {
    	return(xBox_Driver.getRawButton(2));
    }
    
    public boolean crawlRight() {
    	return(xBox_Driver.getRawButton(3));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxBox_Driver() {
        return xBox_Driver;
    }

    public Joystick getxBox_CoDriver() {
        return xBox_CoDriver;
    }

    public Joystick getlaunchPad() {
        return launchPad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

