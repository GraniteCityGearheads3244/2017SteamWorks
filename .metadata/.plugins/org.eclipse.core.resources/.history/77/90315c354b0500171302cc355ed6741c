// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.subsystems;

import org.usfirst.frc3244.HungryVonHippo.Robot;
import org.usfirst.frc3244.HungryVonHippo.RobotMap;
import org.usfirst.frc3244.HungryVonHippo.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class FlyWheel extends Subsystem {
	
	StringBuilder _sb = new StringBuilder();
	int _loops = 0;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Indexer = RobotMap.flyWheelmotor_Indexer;
    private final CANTalon motor_FlyWheel = RobotMap.flyWheelmotor_FlyWheel;
    private final Servo servo_Elevator = RobotMap.flyWheelservo_Elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	 	
	 	private boolean m_useVoltageRamp = true;
	 	private double m_voltageRampRate = 25.0;//48.0; // in volts/second
	 	private boolean m_breakMode = false;


	 	// member variables to support closed loop mode
	 	private boolean m_closedLoopMode = true;
	 	private double m_maxWheelSpeed = 900;     // empirically measured around 900
		private double m_wheelSpeed;
	  


    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void My_FlyWheel_Run(double percent){
    	
    	/* Speed mode */
        m_wheelSpeed = percent * m_maxWheelSpeed;

    	motor_FlyWheel.set(m_wheelSpeed); /* 1500 RPM in either direction */
    	
    	System.out.println(My_GetFlyWheelSpeed_Target());
    }
    
    public void My_FlyWheel_Stop(){
    	motor_FlyWheel.set(0);
    }
    
    public double My_GetFlyWheelSpeed_Target(){
    	return motor_FlyWheel.getSetpoint();
    }
    public double My_GetFlyWheelSpeed_Acctual(){
    	return motor_FlyWheel.getSpeed();
    }
    
    public void My_Fuel_Indexer_Run(double power){
    	motor_Indexer.set(power);
    }
    
    public void updateSmartDashboard() {

		if (Robot.DEBUG) {	
			SmartDashboard.putNumber("Fly Wheel RPM", motor_FlyWheel.getSpeed());
		}
    }
		
}

