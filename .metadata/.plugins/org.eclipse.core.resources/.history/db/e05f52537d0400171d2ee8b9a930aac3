// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon drivemotor_Front_Left;
    public static CANTalon drivemotor_Front_Right;
    public static CANTalon drivemotor_Back_Left;
    public static CANTalon drivemotor_Back_Right;
    public static SpeedController winchmotor_Winch;
    public static DigitalInput winchlimitSwitch_Left;
    public static DigitalInput winchlinitSwitch_Right;
    public static SpeedController fuelIntakemotor_IntakeRoller;
    public static AnalogPotentiometer wristPot;
    public static SpeedController wristmotor;
    public static SpeedController flyWheelmotor_Indexer;
    public static CANTalon flyWheelmotor_FlyWhell;
    public static Servo flyWheelservo_Elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AHRS ahrs;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivemotor_Front_Left = new CANTalon(1);
        LiveWindow.addActuator("Drive", "motor_Front_Left", drivemotor_Front_Left);
        
        drivemotor_Front_Right = new CANTalon(2);
        LiveWindow.addActuator("Drive", "motor_Front_Right", drivemotor_Front_Right);
        
        drivemotor_Back_Left = new CANTalon(3);
        LiveWindow.addActuator("Drive", "motor_Back_Left", drivemotor_Back_Left);
        
        drivemotor_Back_Right = new CANTalon(4);
        LiveWindow.addActuator("Drive", "motor_Back_Right", drivemotor_Back_Right);
        
        winchmotor_Winch = new VictorSP(1);
        LiveWindow.addActuator("Winch", "motor_Winch", (VictorSP) winchmotor_Winch);
        
        winchlimitSwitch_Left = new DigitalInput(0);
        LiveWindow.addSensor("Winch", "limitSwitch_Left", winchlimitSwitch_Left);
        
        winchlinitSwitch_Right = new DigitalInput(1);
        LiveWindow.addSensor("Winch", "linitSwitch_Right", winchlinitSwitch_Right);
        
        fuelIntakemotor_IntakeRoller = new VictorSP(2);
        LiveWindow.addActuator("Fuel Intake", "motor_IntakeRoller", (VictorSP) fuelIntakemotor_IntakeRoller);
        
        wristPot = new AnalogPotentiometer(2, 270.0, -82.3);
        LiveWindow.addSensor("Wrist", "Pot", wristPot);
        
        wristmotor = new Spark(3);
        LiveWindow.addActuator("Wrist", "motor", (Spark) wristmotor);
        
        flyWheelmotor_Indexer = new VictorSP(5);
        LiveWindow.addActuator("FlyWheel", "motor_Indexer", (VictorSP) flyWheelmotor_Indexer);
        
        flyWheelmotor_FlyWhell = new CANTalon(5);
        LiveWindow.addActuator("FlyWheel", "motor_FlyWhell", flyWheelmotor_FlyWhell);
        
        flyWheelservo_Elevator = new Servo(4);
        LiveWindow.addActuator("FlyWheel", "servo_Elevator", flyWheelservo_Elevator);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // Invert Motors
        fuelIntakemotor_IntakeRoller.setInverted(true);
        winchmotor_Winch.setInverted(true);
        flyWheelmotor_Indexer.setInverted(true);
        
        // Invert Encoders
        flyWheelmotor_FlyWhell.reverseSensor(true);
        
        flyWheelmotor_FlyWhell.configNominalOutputVoltage(+12.0f, -0.0f);
        flyWheelmotor_FlyWhell.configPeakOutputVoltage(+12.0f, -0.0f);
        /* set closed loop gains in slot0 */
        flyWheelmotor_FlyWhell.setProfile(0);
        flyWheelmotor_FlyWhell.setF(0.1097);
        flyWheelmotor_FlyWhell.setP(0.02);
        flyWheelmotor_FlyWhell.setI(0.0); 
        flyWheelmotor_FlyWhell.setD(0);
    	
    	
        
        //Create Gyro
        try {
        	System.out.println("Hello Tying to INIT Navx");
            /* Communicate w/navX MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
        
            //ahrs = new AHRS(SPI.Port.kMXP); 
        	ahrs = new AHRS(I2C.Port.kMXP);
        	ahrs = new AHRS(SerialPort.Port.kUSB);
            //ahrs = new AHRS(I2C.Port.kOnboard); 
        	//ahrs = new AHRS(I2C.Port.kOnboard,(byte)200);
            
        } catch (RuntimeException ex ) {
        	System.out.println("Hello from the runtimeExcept");
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
    }
}
