// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.HungryVonHippo.subsystems;

import org.usfirst.frc3244.HungryVonHippo.RobotMap;
import org.usfirst.frc3244.HungryVonHippo.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class FlyWheel extends Subsystem {
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor_Indexer = RobotMap.flyWheelmotor_Indexer;
    //private final CANTalon motor_FlyWhell = RobotMap.flyWheelmotor_FlyWhell;
    private final Servo servo_Elevator = RobotMap.flyWheelservo_Elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
	    private final CANTalon flyWheel = RobotMap.flyWheelmotor_FlyWhell;;
	  
	 // member variables for PID Motor
	 	private static final int kMaxNumberOfMotors = 1;
	 	private final int m_invertedMotors[] = new int[kMaxNumberOfMotors];
	 	private static final int kFlyWheel = 0;


	 	// create objects needed for independent control of each wheel
	 	private CANTalon[] m_talons = new CANTalon[kMaxNumberOfMotors];
	 	private double m_wheelSpeeds[] = new double[kMaxNumberOfMotors];
	 	private double m_zeroPositions[] = new double[kMaxNumberOfMotors];

	 	private boolean m_useVoltageRamp = true;
	 	private double m_voltageRampRate = 25.0;//48.0; // in volts/second
	 	private boolean m_breakMode = false;


	 	// member variables to support closed loop mode
	 	private boolean m_closedLoopMode = true;
	 	private double m_maxWheelSpeed = 360;//550.0;     // empirically measured around 560 to 580	
	  

	    // Put methods for controlling this subsystem
	    // here. Call these from Commands.
	 	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double highGoal_Servo_Auto = .5;
    public static final double highGoal_FlyWheel_Auto = 80;
    public static final double indexer_FeedRate_HighSpeed = 100;
    public static final double indexer_FeedRate_Med_Speed = 75;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    


    public FlyWheel() {
    	int talonIndex = 0;

    	// construct the talons
    	m_talons[kFlyWheel] = flyWheel;
    	
    	// set all Talon SRX encoder values to zero
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].setPosition(0);
		}
		
		// set all the Talon feedback Devices
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].setFeedbackDevice(FeedbackDevice.QuadEncoder);
		}
		
		// 
		
		// Configure Nominal Output Voltage
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].configNominalOutputVoltage(+0.0f, -0.0f);
		}
		
		// Configure Peak Output Voltage
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].configPeakOutputVoltage(+12.0f, -12.0f);
		}
		
		// set all the Talon SRX encoders to reverce
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].reverseSensor(true);
		}

		// put all Talon SRX into brake mode
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].enableBrakeMode(m_breakMode);
		}

		// ensure ramp rate set accordingly
		if (m_useVoltageRamp) {
			for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
				m_talons[talonIndex].setVoltageRampRate(m_voltageRampRate);
			}
		} else {
			// clear all voltage ramp rates
			for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
				m_talons[talonIndex].setVoltageRampRate(0.0);
			}
		}
		// Also need to set up the "inverted motors" array for the mecanum drive
		// code
		m_invertedMotors[kFrontLeft] = 1;
		m_invertedMotors[kFrontRight] = -1;
		m_invertedMotors[kBackLeft] = 1;
		m_invertedMotors[kBackRight] = -1;
    }
}

